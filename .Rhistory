dados$Number_of_Seats = as.factor(dados$Number_of_Seats)
summary(dados$Number_of_Seats)
unique(dados$Number_of_Doors)
dados$Number_of_Doors = as.factor(dados$Number_of_Doors)
summary(dados$Number_of_Doors)
unique(dados$Tire_Size)
table(dados$Tire_Size)
dados$Tire_Size = as.factor(dados$Tire_Size)
str(dados)
summary(dados)
length(dados)
dados[1]
class(dados[1]_
class(dados[1])
View(dados)
class(dados[, 1])
classLabel(class(dados[1]))
# Renomeando as colunas para nomes mais entendíveis, e retirando os espaços
col_names = c("Car",
"Company",
"Model",
"Minimal_Price_Gross",
"Engine_Power_Km",
"Maximum_Torque_Nm",
"Type_of_Brakes",
"Drive_Type",
"Battery_Capacity_Kwh",
"Range_WLTP_Km",
"Wheelbase_Cm",
"Length_Cm",
"Width_Cm",
"Height_Cm",
"Minimal_Empty_Weight_Kg",
"Permissable_Gross_Weight_Kg",
"Maximun_Load_Capacity_Kg",
"Number_of_Seats",
"Number_of_Doors",
"Tire_Size",
"Maximum_Speed_Kph",
"Boot_Capacity_Vda",
"Acceleration_0_to_100",
"Maximum_DC_Charging_Power_Kw",
"Mean_Energy_Consumption_Kwh_per_100_Km")
library(ggplot2)
lapply(col_names, function(x){
if(!is.factor(dados[,x]) & !is.character(dados[, x])) {
ggplot(dados, aes_string(x)) +
geom_boxplot() +
ggtitle(paste("Boxplot de",x))}})
# Criando gráfico de barras para as variáveis do tipo fator
lapply(col_names, function(x){
if(is.factor(dados[,x])) {
ggplot(dados, aes_string(x)) +
geom_bar() +
ggtitle(paste("Frequência da variável",x))}})
# Criando gráfico de barras para as variáveis do tipo fator
lapply(col_names, function(x){
if(is.factor(dados[,x])) {
ggplot(dados, aes_string(x)) +
geom_bar() +
ggtitle(paste("Frequência da variável",x))}})
str(dados)
# Criando gráfico de barras para as variáveis do tipo fator
lapply(col_names, function(x){
if(is.factor(dados[,x])) {
ggplot(dados, aes_string(x)) +
geom_bar() +
ggtitle(paste("Frequência da variável",x))}})
summary(dados)
# Criando gráfico de barras para as variáveis do tipo fator
lapply(col_names, function(x){
if(is.factor(dados[, x])) {
ggplot(dados, aes_string(x)) +
geom_bar() +
ggtitle(paste("Frequência da variável",x))}})
# Renomeando as colunas para nomes mais entendíveis, e retirando os espaços
col_names = c("Car",
"Company",
"Model",
"Minimal_Price_Gross",
"Engine_Power_Km",
"Maximum_Torque_Nm",
"Type_of_Brakes",
"Drive_Type",
"Battery_Capacity_Kwh",
"Range_WLTP_Km",
"Wheelbase_Cm",
"Length_Cm",
"Width_Cm",
"Height_Cm",
"Minimal_Empty_Weight_Kg",
"Permissable_Gross_Weight_Kg",
"Maximun_Load_Capacity_Kg",
"Number_of_Seats",
"Number_of_Doors",
"Tire_Size",
"Maximum_Speed_Kph",
"Boot_Capacity_Vda",
"Acceleration_0_to_100",
"Maximum_DC_Charging_Power_Kw",
"Mean_Energy_Consumption_Kwh_per_100_Km")
# Criando boxplot para as variáveis numéricas
lapply(col_names, function(x){
if(!is.factor(dados[,x]) & !is.character(dados[, x])) {
ggplot(dados, aes_string(x)) +
geom_boxplot() +
ggtitle(paste("Boxplot de",x))}})
# Renomeando as colunas para nomes mais entendíveis, e retirando os espaços
col_names = c("Car",
"Company",
"Model",
"Minimal_Price_Gross",
"Engine_Power_Km",
"Maximum_Torque_Nm",
"Type_of_Brakes",
"Drive_Type",
"Battery_Capacity_Kwh",
"Range_WLTP_Km",
"Wheelbase_Cm",
"Length_Cm",
"Width_Cm",
"Height_Cm",
"Minimal_Empty_Weight_Kg",
"Permissable_Gross_Weight_Kg",
"Maximun_Load_Capacity_Kg",
"Number_of_Seats",
"Number_of_Doors",
"Tire_Size",
"Maximum_Speed_Kph",
"Boot_Capacity_Vda",
"Acceleration_0_to_100",
"Maximum_DC_Charging_Power_Kw",
"Mean_Energy_Consumption_Kwh_per_100_Km")
names(dados) = col_names
View(dados)
# Verificando valores NA
colSums(is.na(dados))
dim(dados)
dim(dados)
# Verificando os tipos de dados
str(dados)
TRUE & TRUE
FALSE & TRUE
# Criando gráfico de barras para as variáveis do tipo fator
lapply(col_names, function(x){
if(is.factor(dados[, x])) {
ggplot(dados, aes_string(x)) +
geom_bar() +
ggtitle(paste("Frequência da variável",x))}})
lapply(col_names, function(x){
if(is.factor(dados[, x])) {
ggplot(dados, aes_string(x)) +
geom_bar() +
ggtitle(paste("Frequência da variável",x))}})
library(ggplot2)
# Criando gráfico de barras para as variáveis do tipo fator
lapply(col_names, function(x){
if(is.factor(dados[, x])) {
ggplot(dados, aes_string(x)) +
geom_bar() +
ggtitle(paste("Frequência da variável",x))}})
# Criando gráfico de barras para as variáveis do tipo fator
lapply(col_names, function(x){
if(is.factor(dados[,x])) {
ggplot(dados, aes_string(x)) +
geom_bar() +
ggtitle(paste("Frequência da variável",x))}})
# Criando gráfico de barras para as variáveis do tipo fator
lapply(col_names, function(x){
if(is.factor(dados[,x])) {
ggplot(dados, aes_string(x)) +
geom_bar() +
ggtitle(paste("Frequência da variável",x))}})
# Criando boxplot para as variáveis numéricas
lapply(col_names, function(x){
if(!is.factor(dados[,x]) & !is.character(dados[,x])) {
ggplot(dados, aes_string(x)) +
geom_boxplot() +
ggtitle(paste("Boxplot de",x))}})
# Criando gráfico de barras para as variáveis do tipo fator
lapply(col_names, function(x){
if(is.factor(dados[,x])) {
ggplot(dados, aes_string(x)) +
geom_bar() +
ggtitle(paste("Frequência da variável",x))}})
# Criando gráfico de barras para as variáveis do tipo fator
lapply(col_names, function(x){
if(!is.factor(dados[,x])) {
ggplot(dados, aes_string(x)) +
geom_bar() +
ggtitle(paste("Frequência da variável",x))}})
# Criando gráfico de barras para as variáveis do tipo fator
lapply(col_names, function(x){
if(is.factor(as.data.frame(dados[,x]))) {
ggplot(dados, aes_string(x)) +
geom_bar() +
ggtitle(paste("Frequência da variável",x))}})
View(dados)
dados[,"Drive_Type"]
class(dados[,"Drive_Type"])
as.array(dados[,"Drive_Type"])
as.data.frame(dados[,"Drive_Type"])
class(as.data.frame(dados[,"Drive_Type"]))
is.factor(as.data.frame(dados[,"Drive_Type"]))
is.factor(as.character(dados[,"Drive_Type"]))
is.factor(as.data.frame.array(dados[,"Drive_Type"]))
is.factor(as.list(dados[,"Drive_Type"]))
is.factor((dados[,"Drive_Type"]))
is.factor(as.name(dados[,"Drive_Type"]))
is.factor(dados[,"Drive_Type"])
class(dados[,"Drive_Type"])
class(dados[[,"Drive_Type"]])
?tibble
library(tidyverse)
df = as.data.frame(dados)
# Criando gráfico de barras para as variáveis do tipo fator
lapply(col_names, function(x){
if(is.factor(df[,x])) {
ggplot(df, aes_string(x)) +
geom_bar() +
ggtitle(paste("Frequência da variável",x))}})
# Criando boxplot para as variáveis numéricas
lapply(col_names, function(x){
if(!is.factor(df[,x]) & !is.character(df[,x])) {
ggplot(df, aes_string(x)) +
geom_boxplot() +
ggtitle(paste("Boxplot de",x))}})
str(df)
View(df)
# Criando gráfico de barras para as variáveis do tipo fator
lapply(col_names, function(x){
if(is.factor(df[,x])) {
ggplot(df, aes_string(x)) +
geom_bar() +
ggtitle(paste("Frequência da variável",x))}})
modelo_v01 = lm(Mean_Energy_Consumption_Kwh_per_100_Km ~ ., data = df)
summary(modelo_v01)
modelo_v01 = lm(Mean_Energy_Consumption_Kwh_per_100_Km ~ ., data = df)
summary(modelo_v01)
modelo_v01
str(dados)
modelo_v01 = lm(Mean_Energy_Consumption_Kwh_per_100_Km ~ ., data = dados)
summary(modelo_v01)
modelo_v01 = lm(Mean_Energy_Consumption_Kwh_per_100_Km ~ ., data = df)
summary(modelo_v01)
str(dados)
modelo_v01 = lm(Mean_Energy_Consumption_Kwh_per_100_Km ~ ., data = df[, -25])
modelo_v01 = lm(Mean_Energy_Consumption_Kwh_per_100_Km ~ ., data = df)
summary(modelo_v01)
summary(df)
str(df)
summary(df)
str(df$Mean_Energy_Consumption_Kwh_per_100_Km)
summary(df$Mean_Energy_Consumption_Kwh_per_100_Km)
unique(df$Mean_Energy_Consumption_Kwh_per_100_Km)
library(randomForest)
modelo_v01 = randomForest(Mean_Energy_Consumption_Kwh_per_100_Km ~ ., data = df,
ntree = 100, nodesize = 10, importance = TRUE)
varImpPlot(modelo_v01)
class(df[, 1])
class(df[, 3])
class(df[, 4])
class(df[, 8])
modelo_v02 = randomForest(Mean_Energy_Consumption_Kwh_per_100_Km ~ ., data = df,
ntree = 100, nodesize = 10)
summary(modelo_v02)
?randomForest()
modelo_v01$importance
desc(modelo_v01$importance)
var_importantes = modelo_v01$importance
var_importantes = as.data.frame(modelo_v01$importance)
View(var_importantes)
var_importantes = arrange(desc(var_importantes$`%IncMSE`))
var_importantes = desc(var_importantes$`%IncMSE`)
var_importantes
var_importantes = as.data.frame(modelo_v01$importance)
var_importantes$%IncMSE = desc(var_importantes$`%IncMSE`)
var_importantes$`%IncMSE` = desc(var_importantes$`%IncMSE`)
var_importantes
modelo_v01$localImportance
modelo_v01$importanceSD
modelo_v01$importance
var_importantes = as.data.frame(modelo_v01$importance)
var_importantes
var_importantes$IncNodePurity = NULL
names(var_importantes) = "IncMSE"
var
var_importantes
var_importantes$IncMSE = arrange(var_importantes$IncMSE)
var_importantes = c("Minimal_Price_Gross",
"Engine_Power_Km",
"Maximum_Torque_Nm",
"Battery_Capacity_Kwh",
"Wheelbase_Cm",
"Length_Cm",
"Width_Cm",
"Minimal_Empty_Weight_Kg",
"Permissable_Gross_Weight_Kg",
"Maximun_Load_Capacity_Kg",
"Mean_Energy_Consumption_Kwh_per_100_Km")
dados_filtrados = df[var_importantes ,]
View(dados_filtrados)
dados_filtrados = df[, var_importantes]
View(dados_filtrados)
var_importantes = c("Minimal_Price_Gross",
"Engine_Power_Km",
"Maximum_Torque_Nm",
"Battery_Capacity_Kwh",
"Wheelbase_Cm",
"Length_Cm",
"Width_Cm",
"Minimal_Empty_Weight_Kg",
"Permissable_Gross_Weight_Kg",
"Maximun_Load_Capacity_Kg",
"Car"
"Mean_Energy_Consumption_Kwh_per_100_Km")
var_importantes = c("Minimal_Price_Gross",
"Engine_Power_Km",
"Maximum_Torque_Nm",
"Battery_Capacity_Kwh",
"Wheelbase_Cm",
"Length_Cm",
"Width_Cm",
"Minimal_Empty_Weight_Kg",
"Permissable_Gross_Weight_Kg",
"Maximun_Load_Capacity_Kg",
"Car",
"Mean_Energy_Consumption_Kwh_per_100_Km")
dados_filtrados = df[, var_importantes]
View(dados_filtrados)
modelo_escolha_variaveis = randomForest(Mean_Energy_Consumption_Kwh_per_100_Km ~ ., data = df,
ntree = 100, nodesize = 10, importance = TRUE)
modelo_v01 = lm(Mean_Energy_Consumption_Kwh_per_100_Km ~ ., data = dados_filtrados)
summary(modelo_v01)
str(dados)
?svm
library(e1071)
modelo_v02 = svm(Mean_Energy_Consumption_Kwh_per_100_Km ~ ., data = dados_filtrados)
summary(modelo_v02)
predict(modelo_v01, data = dados_filtrados)
library(caret)
treino = createDataPartition(dados_filtrados, p = 0.75)
index = createDataPartition(dados_filtrados$Mean_Energy_Consumption_Kwh_per_100_Km, p = 0.75)
index
treino = dados_filtrados[index, ]
index = createDataPartition(dados_filtrados$Mean_Energy_Consumption_Kwh_per_100_Km, p = 0.75, list = FALSE)
treino = dados_filtrados[index, ]
teste = dados_filtrados[-index, ]
modelo_v01 = lm(Mean_Energy_Consumption_Kwh_per_100_Km ~ ., data = treino)
summary(modelo_v01)
predict(modelo_v01, data = teste)
plot(modelo_v01)
treino = dados_filtrados[index, ]
teste = dados_filtrados[-index, ]
treino
index
index = createDataPartition(dados_filtrados$Mean_Energy_Consumption_Kwh_per_100_Km, p = .75, list = FALSE)
treino = dados_filtrados[index, ]
teste = dados_filtrados[-index, ]
index
treino
teste
View(treino)
modelo_v01 = lm(Mean_Energy_Consumption_Kwh_per_100_Km ~ ., data = treino)
summary(modelo_v01)
predict(modelo_v01, data = teste)
View(teste)
predict(modelo_v01, data = teste[, -12])
View(treino)
View(teste)
modelo_v01 = lm(Mean_Energy_Consumption_Kwh_per_100_Km ~ ., data = treino)
summary(modelo_v01)
predict(modelo_v01, data = teste[, -12])
predict(modelo_v01, data = teste)
plot(modelo_v01)
modelo_v02 = svm(Mean_Energy_Consumption_Kwh_per_100_Km ~ ., data = treino
modelo_v02 = svm(Mean_Energy_Consumption_Kwh_per_100_Km ~ ., data = treino)
modelo_v02 = svm(Mean_Energy_Consumption_Kwh_per_100_Km ~ ., data = treino)
summary(modelo_v02)
predict(modelo_v02)
predict(modelo_v02, data = teste)
predict(modelo_v02, newdata = teste)
predict(modelo_v01, newdata = teste[, -12])
index = createDataPartition(dados_filtrados$Mean_Energy_Consumption_Kwh_per_100_Km, p = .75, list = FALSE)
treino = dados_filtrados[index, ]
teste = dados_filtrados[-index, ]
modelo_v01 = lm(Mean_Energy_Consumption_Kwh_per_100_Km ~ ., data = treino)
summary(modelo_v01)
predict(modelo_v01, newdata = teste[, -12])
index = createDataPartition(dados_filtrados$Mean_Energy_Consumption_Kwh_per_100_Km, p = .75, list = FALSE)
treino = dados_filtrados[index, ]
teste = dados_filtrados[-index, ]
modelo_v01 = lm(Mean_Energy_Consumption_Kwh_per_100_Km ~ ., data = treino)
summary(modelo_v01)
predict(modelo_v01, newdata = teste[, -12])
modelo_v02 = svm(Mean_Energy_Consumption_Kwh_per_100_Km ~ ., data = treino)
summary(modelo_v02)
predict(modelo_v02, newdata = teste[, -12])
predict(modelo_v02, newdata = teste)
modelo_v01 = lm(Mean_Energy_Consumption_Kwh_per_100_Km ~ ., data = treino)
predict(modelo_v01, newdata = teste[, -12])
dados_filtrados$Car = NULL
index = createDataPartition(dados_filtrados$Mean_Energy_Consumption_Kwh_per_100_Km, p = .75, list = FALSE)
treino = dados_filtrados[index, ]
teste = dados_filtrados[-index, ]
predict(modelo_v01, newdata = teste[, -11])
index = createDataPartition(dados_filtrados$Mean_Energy_Consumption_Kwh_per_100_Km, p = .75, list = FALSE)
treino = dados_filtrados[index, ]
teste = dados_filtrados[-index, ]
modelo_v01 = lm(Mean_Energy_Consumption_Kwh_per_100_Km ~ ., data = treino)
predict(modelo_v01, newdata = teste[, -11])
summary(modelo_v01)
plot(modelo_v01)
summary(modelo_v01)
# R-squared = 0.91
previsoes_v01 = data.frame(observado = teste$Mean_Energy_Consumption_Kwh_per_100_Km,
previsto = predict(modelo_v01, newdata = teste[, -11]))
View(previsoes_v01)
confusionMatrix(previsoes_v01$observado, previsoes_v01$previsto)
View(previsoes_v01)
plot(previsoes_v01$observado, previsoes_v01$previsto)
library("ROCR")
# Gerando as classes de dados
class1 <- predict(modelo_v01, newdata = teste[, -11], type = 'prob')
pred <- prediction(previsoes_v01$previsto, previsoes_v01$observado)
pred <- prediction(previsoes_v01[, 2], previsoes_v01$observado)
perf <- performance(pred, "tpr","fpr")
summary(modelo_v01)
install.packages("MLmetrics")
library(MLmetrics)
?R2_Score
R2_Score(y_pred = previsoes_v01$previsto, y_true = previsoes_v01$observado)
summary(modelo_v01)
R2_Score(y_pred = previsoes_v01$previsto, y_true = previsoes_v01$observado)
?Area_Under_Curve
Area_Under_Curve(previsoes_v01$observado, previsoes_v01$previsto)
MLmetrics::
MLmetrics::
observado
MLmetrics::
MLmetrics::
Area_Under_Curve(previsoes_v01$observado, previsoes_v01$previsto)
Area_Under_Curve(previsoes_v01$previsto, previsoes_v01$observado)
library(pROC)
auc(previsoes_v01$observado, previsoes_v01$previsto)
?auc
ggplot(previsoes_v01, aes(observado, previsto)) +
geom_point()
ggplot(previsoes_v01, aes(observado, previsto)) +
geom_bar()
ggplot(previsoes_v01, aes(observado)) +
geom_bar()
ggplot(previsoes_v01, aes(observado)) +
geom_point()
ggplot(previsoes_v01, aes(observado)) +
geom_abline()
ggplot(previsoes_v01, aes(observado)) +
geom_curve()
ggplot(previsoes_v01, aes(observado, previsto)) +
geom_curve()
ggplot(previsoes_v01, aes(observado, previsto)) +
geom_density()
ggplot(previsoes_v01, aes(observado, previsto)) +
geom_smooth(method = "lm")
ggplot(previsoes_v01, aes(observado, previsto)) +
geom_point() +
geom_smooth(method = "lm")
plot(previsoes_v01$observado, previsoes_v01$previsto)
abline(modelo_v01)
abline(modelo_v01)
plot(previsoes_v01$observado, previsoes_v01$previsto)
abline(modelo_v01)
plot(previsoes_v01)
plot(modelo_v01)
res = residuals(modelo_v01)
res = residuals(modelo_v01)
res
res = as.data.frame(res)
res
plot(res)
ggplot(previsoes_v01, aes(x = observado, y = previsto)) +
geom_point() + stat_smooth()
modelo_v02 = svm(Mean_Energy_Consumption_Kwh_per_100_Km ~ ., data = treino)
predict(modelo_v02, newdata = teste[, -11])
summary(modelo_v02)
modelo_v02
summary(modelo_v02)
modelo_v02
modelo_v02$type
modelo_v02$cost
modelo_v02$levels
modelo_v02$coefs
summary(modelo_v01)
?R2
R2(previsoes_v01$observado, previsoes_v01$previsto)
R2(previsoes_v01$previsto, previsoes_v01$observado)
R2_Score(previsoes_v01$previsto, previsoes_v01$observado)
# Calculando o R-Squared com o pacote Caret
R2(previsoes_v01$previsto, previsoes_v01$observado)
previsoes_v02 = data.frame(observado = teste[, 11],
previsto = predict(modelo_v02, newdata = teste[, -11]))
R2(previsoes_v02$previsto, previsoes_v02$observado)
# Vamos tentar mais uma vez com o Random Forest
?randomForest
modelo_v03 = randomForest(Mean_Energy_Consumption_Kwh_per_100_Km ~ ., data = treino)
predict(modelo_v03, newdata = teste[, -11])
summary(modelo_v03)
previsoes_v03 = data.frame(observado = teste[, 11],
previsto = predict(modelo_v03, newdata = teste[, -11]))
View(previsoes_v03)
R2(previsoes_v03$previsto, previsoes_v03$observado)
View(previsoes_v02)
